{"version":3,"sources":["serviceWorker.ts","API/task-api.ts","API/todolist-api.ts","API/auth-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","App/app-reducer.ts","features/TodolistsList/todolists_reducer.ts","features/TodolistsList/tasks_reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","App/App.tsx","App/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","todolistId","delete","title","post","put","authAPI","data","handleServerAppError","dispatch","messages","length","setAppError","setAppStatus","handleNetworkAppError","error","message","initialState","isLoggedIn","setIsLoggedIn","value","type","status","isInitialized","taskAPI","taskId","model","updateTaskTC","domainModel","getState","task","tasks","find","t","id","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addTask","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onChangeTitleHandler","useCallback","newValue","changeTaskTitle","key","className","Completed","Checkbox","newIsDoneValue","checked","changeTaskStatus","New","removeTask","Delete","Todolist","demo","todolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","useDispatch","useEffect","thunk","items","setTasksAC","changeTodolistTitle","newTitle","tasksForTodolist","filter","removeTodolist","entityStatus","map","Button","TodolistsList","todolists","useSelector","state","auth","removeTaskAC","removeTasksTC","item","addTasksTC","changeTitleTodolistAC","changeTitleTodolistsTC","removeTodolistAC","removeTodolistsTC","addTodolist","addTodolistsTC","Grid","container","style","padding","spacing","tl","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","app","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","width","textAlign","top","CircularProgress","rootReducer","combineReducers","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f89b82c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fe3cd028-48b8-4f24-aace-482e17e6fa4c'\r\n    }\r\n})\r\n\r\n//API\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`${todolistId}/tasks`)\r\n    },\r\n    deleteTasks(taskId: string, todolistId: string) {\r\n        return instance.delete<ResponseTaskType>(`${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTasks(todolistId: string, title: string) {\r\n        return instance.post<ResponseTaskType<{ item: TaskType }>>(`${todolistId}/tasks`, {title: title})\r\n    },\r\n    updateTasks(taskId: string, todolistId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseTaskType<TaskType>>(`${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n//types\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\nexport type ResponseTaskType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}","import axios from 'axios'\r\nimport {TodolistDomainType} from \"../features/TodolistsList/todolists_reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fe3cd028-48b8-4f24-aace-482e17e6fa4c'\r\n    }\r\n})\r\n\r\n//API\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistDomainType>>(`todo-lists/`)\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistDomainType }>>(`todo-lists/`, {title: title})\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/auth/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fe3cd028-48b8-4f24-aace-482e17e6fa4c'\r\n    }\r\n})\r\n\r\n//API\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('me')\r\n    }\r\n}\r\n\r\n//types\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import {setAppError, setAppErrorActionType, setAppStatus, setAppStatusActionType} from \"../App/app-reducer\";\r\nimport {ResponseTaskType} from \"../API/task-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseTaskType<D>, dispatch: Dispatch<setAppErrorActionType | setAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\nexport const handleNetworkAppError = (error: { message: string }, dispatch: Dispatch<setAppErrorActionType | setAppStatusActionType>) => {\r\n    dispatch(setAppError(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppErrorActionType, setAppStatus, setAppStatusActionType} from \"../../App/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../API/auth-api\";\r\nimport {handleNetworkAppError, handleServerAppError} from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setIsLoggedIn = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(true))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error => {\r\n            handleNetworkAppError(error, dispatch)\r\n        }))\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn(false))\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error => {\r\n            handleNetworkAppError(error, dispatch)\r\n        }))\r\n}\r\n\r\n// types\r\ntype InitialStateType = typeof initialState\r\ntype ActionsType = ReturnType<typeof setIsLoggedIn> | setAppStatusActionType | setAppErrorActionType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../API/auth-api\";\r\nimport {setIsLoggedIn} from \"../features/Login/auth-reducer\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'loading' as RequestStatusType,\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-INITIALIZED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setAppError = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitialized = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\r\n\r\n//thunks\r\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn(true))\r\n        } else {\r\n\r\n        }\r\n        dispatch(setAppInitialized(true))\r\n    })\r\n}\r\n\r\n//types\r\nexport type setAppErrorActionType = ReturnType<typeof setAppError>;\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatus>;\r\nexport type setAppInitializedType = ReturnType<typeof setAppInitialized>;\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\ntype ActionsType = setAppErrorActionType\r\n    | setAppStatusActionType\r\n    | setAppInitializedType","import {todolistAPI, TodolistType} from \"../../API/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, setAppErrorActionType, setAppStatus, setAppStatusActionType} from \"../../App/app-reducer\";\r\nimport {handleNetworkAppError, handleServerAppError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTodolistAC = (id: string) =>\r\n    ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistDomainType) =>\r\n    ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTitleTodolistAC = (id: string, title: string) =>\r\n    ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\r\nexport const changeFilterTodolistAC = (id: string, filter: FilterValueType) =>\r\n    ({type: 'CHANGE-TODOLIST-FILTER', id, filter} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) =>\r\n    ({type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistDomainType>) =>\r\n    ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = () => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    todolistAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatus('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkAppError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTodolistsTC = (todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n    todolistAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(removeTodolistAC(todolistId))\r\n            dispatch(setAppStatus('succeeded'))\r\n            handleServerAppError(res.data, dispatch)\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkAppError(error, dispatch)\r\n        })\r\n}\r\nexport const addTodolistsTC = (title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then((res) => {\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatus('succeeded'))\r\n            handleServerAppError(res.data, dispatch)\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkAppError(error, dispatch)\r\n        })\r\n}\r\nexport const changeTitleTodolistsTC = (id: string, title: string) => (dispatch: ThunkDispatch) => {\r\n    todolistAPI.updateTodolist(id, title)\r\n        .then((res) => {\r\n            dispatch(changeTitleTodolistAC(id, title))\r\n            handleServerAppError(res.data, dispatch)\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkAppError(error, dispatch)\r\n        })\r\n}\r\n\r\n//types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValueType, entityStatus: RequestStatusType }\r\ntype ThunkDispatch = Dispatch<ActionType | setAppStatusActionType | setAppErrorActionType>\r\ntype ActionType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTitleTodolistAC>\r\n    | ReturnType<typeof changeFilterTodolistAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | SetTodolistsActionType\r\n\r\n\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from \"./todolists_reducer\";\r\nimport {taskAPI, TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../API/task-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {setAppErrorActionType, setAppStatus, setAppStatusActionType} from \"../../App/app-reducer\";\r\nimport {handleNetworkAppError, handleServerAppError} from \"../../utils/error-utils\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case \"ADD-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n            }\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {\r\n                ...state,\r\n                [action.todolist.id]: []\r\n            }\r\n        case \"REMOVE-TODOLIST\":\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        case \"SET-TODOLISTS\": {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        case \"SET-TASKS\":\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: \"ADD-TASK\", task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', taskId, model, todolistId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n//thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    taskAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatus('succeeded'))\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkAppError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTasksTC = (taskId: string, todolistId: string) => (dispatch: ThunkDispatch) => {\r\n    taskAPI.deleteTasks(taskId, todolistId)\r\n        .then((res) => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n            handleServerAppError(res.data, dispatch)\r\n        })\r\n        .catch((error) => {\r\n            handleNetworkAppError(error, dispatch)\r\n        })\r\n}\r\nexport const addTasksTC = (todolistId: string, title: string) => (dispatch: ThunkDispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    taskAPI.createTasks(todolistId, title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const action = addTaskAC(res.data.data.item)\r\n                dispatch(action)\r\n                dispatch(setAppStatus('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error => {\r\n            handleNetworkAppError(error, dispatch)\r\n        }))\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        taskAPI.updateTasks(taskId, todolistId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error => {\r\n                handleNetworkAppError(error, dispatch)\r\n            }))\r\n    }\r\n\r\n//types\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype ActionType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof updateTaskAC>\r\ntype ThunkDispatch = Dispatch<ActionType | setAppStatusActionType | setAppErrorActionType>\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm')\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       disabled={disabled}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addTask} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\"\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    return editMode\r\n        ? <TextField variant={\"outlined\"}\r\n                     value={title}\r\n                     onChange={onChangeTitleHandler}\r\n                     onBlur={activateViewMode}\r\n                     autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../API/task-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todolistId: string) => void\r\n    removeTask: (taskID: string, todolistId: string) => void\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId, props.changeTaskTitle])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'isDone' : ''}>\r\n            <Checkbox color=\"primary\"\r\n                      onChange={onChangeStatusHandler}\r\n                      checked={props.task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan value={props.task.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../API/task-api\";\r\nimport {FilterValueType, TodolistDomainType} from \"../todolists_reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks_reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValueType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: TodolistPropsType) => {\r\n    console.log('Todolist Called')\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, newTitle)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button color={\"default\"}\r\n                    variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}>\r\n                All\r\n            </Button>\r\n            <Button color={\"primary\"}\r\n                    variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}>\r\n                Active\r\n            </Button>\r\n            <Button color={\"secondary\"}\r\n                    variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}>\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {\r\n    addTodolistsTC,\r\n    changeFilterTodolistAC,\r\n    changeTitleTodolistsTC,\r\n    fetchTodolistsTC,\r\n    FilterValueType,\r\n    removeTodolistsTC,\r\n    TodolistDomainType\r\n} from \"./todolists_reducer\";\r\nimport {addTasksTC, removeTasksTC, TasksStateType, updateTaskTC} from \"./tasks_reducer\";\r\nimport {TaskStatuses} from \"../../API/task-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false, ...props}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTasksTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTasksTC(todolistId, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValueType, todolistId: string) {\r\n        dispatch(changeFilterTodolistAC(todolistId, value))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, newTitle: string) {\r\n        const thunk = changeTitleTodolistsTC(id, newTitle)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (todolistId: string) {\r\n        const thunk = removeTodolistsTC(todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistsTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let tasksForTodolist = tasks[tl.id]\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <Todolist todolist={tl}\r\n                                          key={tl.id}\r\n                                          tasks={tasksForTodolist}\r\n                                          removeTask={removeTask}\r\n                                          changeFilter={changeFilter}\r\n                                          addTask={addTask}\r\n                                          changeTaskStatus={changeTaskStatus}\r\n                                          changeTodolistTitle={changeTodolistTitle}\r\n                                          changeTaskTitle={changeTaskTitle}\r\n                                          removeTodolist={removeTodolist}\r\n                                          demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {setAppError} from \"../../App/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError(null))\r\n    }\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 2) {\r\n                errors.password = 'Password should be more then 2 symbols'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            formik.resetForm()\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/todolist'}/>\r\n    }\r\n    // if (!isLoggedIn) {\r\n    //     return <Redirect to={'/login'}/>\r\n    // }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email\r\n                            ? <div style={{color: \"red\"}}>{formik.errors.email}</div>\r\n                            : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password\r\n                            ? <div style={{color: \"red\"}}>{formik.errors.password}</div>\r\n                            : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    {...formik.getFieldProps('rememberMe')}\r\n                                    checked={formik.values.rememberMe}\r\n                                />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializedAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: \"absolute\", width: '100%', textAlign: \"center\", top: '50%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log Out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' &&\r\n                <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/todolist'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'*'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks_reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists_reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./App/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
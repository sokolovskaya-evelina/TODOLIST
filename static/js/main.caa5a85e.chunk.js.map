{"version":3,"sources":["serviceWorker.ts","API/task-api.ts","API/todolist-api.ts","API/auth-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","App/app-reducer.ts","features/TodolistsList/todolists_reducer.ts","features/TodolistsList/tasks_reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","App/store.ts","features/Login/Login.tsx","App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","todolistId","delete","title","post","put","authAPI","data","handleServerAppError","dispatch","messages","length","setAppError","error","setAppStatus","status","handleNetworkAppError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializedAppTC","isInitialized","appReducer","fetchTodolistsTC","todolists","removeTodolistsTC","changeTodolistEntityStatusAC","id","addTodolistsTC","todolist","item","changeTitleTodolistsTC","changeFilterTodolistAC","index","findIndex","tl","filter","entityStatus","map","splice","unshift","todolistsReducer","taskAPI","taskId","model","fetchTasksTC","tasks","items","removeTasksTC","addTasksTC","task","updateTaskTC","getState","find","t","apiModel","deadline","description","priority","startDate","domainModel","forEach","todoListId","tasksReducer","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addTask","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onChangeTitleHandler","useCallback","newValue","changeTaskTitle","key","className","Completed","Checkbox","newIsDoneValue","checked","changeTaskStatus","New","removeTask","Delete","Todolist","demo","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","useDispatch","useEffect","thunk","changeTodolistTitle","newTitle","tasksForTodolist","removeTodolist","Button","TodolistsList","useSelector","auth","addTodolist","Grid","container","style","padding","spacing","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","app","isOpen","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","resetForm","rejected","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","handleBlur","touched","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","width","textAlign","top","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.caa5a85e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        );\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/todo-lists/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fe3cd028-48b8-4f24-aace-482e17e6fa4c'\r\n    }\r\n})\r\n\r\n//API\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`${todolistId}/tasks`)\r\n    },\r\n    deleteTasks(taskId: string, todolistId: string) {\r\n        return instance.delete<ResponseTaskType>(`${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTasks(todolistId: string, title: string) {\r\n        return instance.post<ResponseTaskType<{ item: TaskType }>>(`${todolistId}/tasks`, {title: title})\r\n    },\r\n    updateTasks(taskId: string, todolistId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseTaskType<TaskType>>(`${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n//types\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New,\r\n    InProgress,\r\n    Completed,\r\n    Draft\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low,\r\n    Middle,\r\n    Hi,\r\n    Urgently,\r\n    Later\r\n}\r\n\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: Array<TaskType>\r\n}\r\nexport type ResponseTaskType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}","import axios from 'axios'\r\nimport {TodolistDomainType} from \"../features/TodolistsList/todolists_reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fe3cd028-48b8-4f24-aace-482e17e6fa4c'\r\n    }\r\n})\r\n\r\n//API\r\nexport const todolistAPI = {\r\n    getTodolist() {\r\n        return instance.get<Array<TodolistDomainType>>(`todo-lists/`)\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistDomainType }>>(`todo-lists/`, {title: title})\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title: title})\r\n    }\r\n}\r\n\r\n//types\r\nexport type TodolistType = {\r\n    id: string\r\n    addedDate: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/auth/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fe3cd028-48b8-4f24-aace-482e17e6fa4c'\r\n    }\r\n})\r\n\r\n//API\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>(`login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{ id: number, email: string, login: string }>>('me')\r\n    }\r\n}\r\n\r\n\r\n//types\r\nexport type FieldErrorType = { field: string, error: string };\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import {setAppError, setAppErrorActionType, setAppStatus, setAppStatusActionType} from \"../App/app-reducer\";\r\nimport {ResponseTaskType} from \"../API/task-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseTaskType<D>, dispatch: Dispatch<setAppErrorActionType | setAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\nexport const handleNetworkAppError = (error: { message: string }, dispatch: Dispatch<setAppErrorActionType | setAppStatusActionType>) => {\r\n    dispatch(setAppError({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {setAppStatus} from \"../../App/app-reducer\";\r\nimport {authAPI, FieldErrorType, LoginParamsType} from \"../../API/auth-api\";\r\nimport {handleNetworkAppError, handleServerAppError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, {\r\n    rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> }\r\n}>('auth/login', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.login(param)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err\r\n        handleNetworkAppError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({errors: [error.message], fieldsErrors: undefined})\r\n    }\r\n})\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await  authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (err) {\r\n        const error: AxiosError = err\r\n        handleNetworkAppError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(loginTC.fulfilled, (state) => {\r\n            state.isLoggedIn = true\r\n        })\r\n        builder.addCase(logoutTC.fulfilled, (state) => {\r\n            state.isLoggedIn = false\r\n        })\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions","import {authAPI} from \"../API/auth-api\";\r\nimport {setIsLoggedIn} from \"../features/Login/auth-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const initializedAppTC = createAsyncThunk('app/initializedApp', async (param, {dispatch}) => {\r\n    const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedIn({isLoggedIn: true}))\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: {\r\n        status: 'loading' as RequestStatusType,\r\n        error: null as string | null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppError(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatus(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializedAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppError, setAppStatus} = slice.actions\r\n\r\n//types\r\nexport type setAppErrorActionType = ReturnType<typeof setAppError>;\r\nexport type setAppStatusActionType = ReturnType<typeof setAppStatus>;\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}","import {todolistAPI, TodolistType} from \"../../API/todolist-api\";\r\nimport {RequestStatusType, setAppStatus} from \"../../App/app-reducer\";\r\nimport {handleNetworkAppError, handleServerAppError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n//thunks\r\nexport const fetchTodolistsTC = createAsyncThunk('todolist/fetchTodolists', async (param, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.getTodolist()\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (error) {\r\n        handleNetworkAppError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const removeTodolistsTC = createAsyncThunk('todolist/removeTodolists', async (todolistId: string, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.deleteTodolist(todolistId)\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        handleServerAppError(res.data, dispatch)\r\n        return {id: todolistId}\r\n    } catch (error) {\r\n        handleNetworkAppError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const addTodolistsTC = createAsyncThunk('todolist/addTodolists', async (title: string, {dispatch,rejectWithValue}) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await todolistAPI.createTodolist(title)\r\n        dispatch(setAppStatus({status: 'succeeded'}))\r\n        handleServerAppError(res.data, dispatch)\r\n        return {todolist: res.data.data.item}\r\n    } catch (error) {\r\n        handleNetworkAppError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\nexport const changeTitleTodolistsTC = createAsyncThunk('todolist/changeTitleTodolists', async (param: { id: string, title: string }, {dispatch,rejectWithValue}) => {\r\n    try {\r\n        const res = await todolistAPI.updateTodolist(param.id, param.title)\r\n        handleServerAppError(res.data, dispatch)\r\n        return {id: param.id, title: param.title}\r\n    } catch (error) {\r\n        handleNetworkAppError(error, dispatch)\r\n        return rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {changeFilterTodolistAC: (state, action: PayloadAction<{ id: string, filter: FilterValueType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        }, changeTodolistEntityStatusAC: (state, action: PayloadAction<{ id: string, status: RequestStatusType }>) => {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status\r\n        },},\r\n    extraReducers: builder => {\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: \"idle\"}))\r\n        })\r\n        builder.addCase(removeTodolistsTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload?.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n        })\r\n        builder.addCase(addTodolistsTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        })\r\n        builder.addCase(changeTitleTodolistsTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload?.id)\r\n                state[index].title = action.payload.title\r\n        })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    changeFilterTodolistAC,\r\n    changeTodolistEntityStatusAC,\r\n} = slice.actions\r\n\r\n//types\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValueType, entityStatus: RequestStatusType }\r\n\r\n\r\n\r\n\r\n","import {addTodolistsTC, fetchTodolistsTC, removeTodolistsTC} from \"./todolists_reducer\";\r\nimport {taskAPI, TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from \"../../API/task-api\";\r\nimport {setAppStatus} from \"../../App/app-reducer\";\r\nimport {handleNetworkAppError, handleServerAppError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n//thunks\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await taskAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n        return {tasks, todolistId}\r\n    } catch (error) {\r\n        handleNetworkAppError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\nexport const removeTasksTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    try {\r\n        const res = await taskAPI.deleteTasks(param.taskId, param.todolistId)\r\n        return {taskId: param.taskId, todolistId: param.todolistId}\r\n    } catch (error) {\r\n        handleNetworkAppError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\nexport const addTasksTC = createAsyncThunk('tasks/addTask', async (param: { todolistId: string, title: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatus({status: 'loading'}))\r\n    try {\r\n        const res = await taskAPI.createTasks(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatus({status: 'succeeded'}))\r\n            return {task: res.data.data.item}\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleNetworkAppError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n    const state = thunkAPI.getState() as AppRootStateType\r\n    const task = state.tasks[param.todolistId].find((t: any) => t.id === param.taskId)\r\n\r\n    if (!task) {\r\n        return thunkAPI.rejectWithValue('task not found in the state')\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n        deadline: task.deadline,\r\n        description: task.description,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        title: task.title,\r\n        status: task.status,\r\n        ...param.domainModel\r\n    }\r\n\r\n    const res = await taskAPI.updateTasks(param.taskId, param.todolistId, apiModel)\r\n    try {\r\n        if (res.data.resultCode === 0) {\r\n            return param\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(null)\r\n        }\r\n    } catch (error) {\r\n        handleNetworkAppError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue(null)\r\n    }\r\n})\r\n\r\nexport const slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistsTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistsTC.fulfilled, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n        builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        })\r\n        builder.addCase(removeTasksTC.fulfilled, (state, action) => {\r\n            const task = state[action.payload.todolistId]\r\n            const index = task.findIndex(t => t.id === action.payload?.taskId)\r\n            if (index > -1) {\r\n                task.splice(index, 1)\r\n            }\r\n        })\r\n        builder.addCase(addTasksTC.fulfilled, (state, action) => {\r\n            state[action.payload.task.todoListId].unshift(action.payload.task)\r\n        })\r\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\r\n            const task = state[action.payload.todolistId]\r\n            const index = task.findIndex(t => t.id === action.payload?.taskId)\r\n            if (index > -1) {\r\n                task[index] = {...task[index], ...action.payload.domainModel}\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n//actions\r\nexport const {} = slice.actions\r\n\r\n//types\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm')\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null)\r\n        }\r\n\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n                       disabled={disabled}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addTask} disabled={disabled}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\"\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    return editMode\r\n        ? <TextField variant={\"outlined\"}\r\n                     value={title}\r\n                     onChange={onChangeTitleHandler}\r\n                     onBlur={activateViewMode}\r\n                     autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../API/task-api\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todolistId: string) => void\r\n    removeTask: (taskID: string, todolistId: string) => void\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = () => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId, props.changeTaskTitle])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'isDone' : ''}>\r\n            <Checkbox color=\"primary\"\r\n                      onChange={onChangeStatusHandler}\r\n                      checked={props.task.status === TaskStatuses.Completed}/>\r\n            <EditableSpan value={props.task.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from 'react';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../API/task-api\";\r\nimport {FilterValueType, TodolistDomainType} from \"../todolists_reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks_reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValueType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: TodolistPropsType) => {\r\n    console.log('Todolist Called')\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, newTitle)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.todolist.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button color={\"default\"}\r\n                    variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}>\r\n                All\r\n            </Button>\r\n            <Button color={\"primary\"}\r\n                    variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}>\r\n                Active\r\n            </Button>\r\n            <Button color={\"secondary\"}\r\n                    variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}>\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {\r\n    addTodolistsTC,\r\n    changeFilterTodolistAC,\r\n    changeTitleTodolistsTC,\r\n    fetchTodolistsTC,\r\n    FilterValueType,\r\n    removeTodolistsTC,\r\n    TodolistDomainType\r\n} from \"./todolists_reducer\";\r\nimport {addTasksTC, removeTasksTC, TasksStateType, updateTaskTC} from \"./tasks_reducer\";\r\nimport {TaskStatuses} from \"../../API/task-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false, ...props}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return\r\n        }\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = removeTasksTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTasksTC({todolistId, title})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValueType, todolistId: string) {\r\n        dispatch(changeFilterTodolistAC({id: todolistId, filter: value}))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback(function (taskId: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, domainModel: {status}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (taskId: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC({taskId, domainModel: {title: newTitle}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, newTitle: string) {\r\n        const thunk = changeTitleTodolistsTC({id, title: newTitle})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (todolistId: string) {\r\n        const thunk = removeTodolistsTC(todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistsTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: \"20px\"}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let tasksForTodolist = tasks[tl.id]\r\n\r\n                        return <Grid item>\r\n                            <Paper style={{padding: \"10px\"}}>\r\n                                <Todolist todolist={tl}\r\n                                          key={tl.id}\r\n                                          tasks={tasksForTodolist}\r\n                                          removeTask={removeTask}\r\n                                          changeFilter={changeFilter}\r\n                                          addTask={addTask}\r\n                                          changeTaskStatus={changeTaskStatus}\r\n                                          changeTodolistTitle={changeTodolistTitle}\r\n                                          changeTaskTitle={changeTaskTitle}\r\n                                          removeTodolist={removeTodolist}\r\n                                          demo={demo}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../App/store\";\r\nimport {setAppError} from \"../../App/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppError({error: null}))\r\n    }\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const isOpen = error !== null\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks_reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists_reducer';\r\nimport {combineReducers} from 'redux';\r\nimport thunk from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type RootReducerType = typeof rootReducer\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\ntype AppDispatchType = typeof store.dispatch\r\nexport const useAppDispatch =  ()=>useDispatch<AppDispatchType>()\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType, useAppDispatch} from \"../../App/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport const Login = () => {\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n    }\r\n    type FormikValuesType = {\r\n        email: string\r\n        password: string\r\n        rememberMe: boolean\r\n    }\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 2) {\r\n                errors.password = 'Password should be more then 2 symbols'\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormikValuesType>) => {\r\n            formik.resetForm()\r\n            const action = await dispatch(loginTC(values))\r\n            if (loginTC.rejected.match(action)) {\r\n                if(action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n\r\n                }\r\n            }\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email &&\r\n                        formik.errors.email\r\n                            ? <div style={{color: \"red\"}}>{formik.errors.email}</div>\r\n                            : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                            onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password &&\r\n                        formik.errors.password\r\n                            ? <div style={{color: \"red\"}}>{formik.errors.password}</div>\r\n                            : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={\r\n                                <Checkbox\r\n                                    {...formik.getFieldProps('rememberMe')}\r\n                                    checked={formik.values.rememberMe}\r\n                                />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistList\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializedAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div style={{position: \"absolute\", width: '100%', textAlign: \"center\", top: '50%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log Out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' &&\r\n                <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route path={'*'} render={() => <h1>404: PAGE NOT FOUND</h1>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./App/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./App/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
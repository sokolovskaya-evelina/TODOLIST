{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists_reducer.ts","state/tasks_reducer.ts","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addTask","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","onChangeTitleHandler","useCallback","newValue","changeTaskTitle","task","id","todolistId","key","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","removeTask","Delete","Todolist","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodolistTitle","newTitle","tasksForTodolist","tasks","filter","t","removeTodolist","map","Button","initialState","AppWithRedux","todolists","useSelector","state","dispatch","useDispatch","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","changeTitle","changeTaskTitleAC","changeTitleTodolistAC","removeTodolistAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","rootReducer","combineReducers","action","stateCopy","filteredTasks","newTasks","todolistTasks","todolist","find","todolistFilter","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b939743a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm')\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error!==null){\r\n            setError(null)\r\n        }\r\n\r\n        if (e.charCode === 13) {\r\n            addTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant={\"outlined\"}\r\n                       value={title}\r\n                       onChange={onChangeHandler}\r\n                       onKeyPress={onKeyPressHandler}\r\n                       error={!!error}\r\n                       label=\"Title\"\r\n                       helperText={error}\r\n            />\r\n            <IconButton color={\"primary\"} onClick={addTask}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})\r\n","import React, {ChangeEvent, useState} from \"react\"\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    console.log('EditableSpan called')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState('')\r\n\r\n    const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    return editMode\r\n        ? <TextField variant={\"outlined\"}\r\n                     value={title}\r\n                     onChange={onChangeTitleHandler}\r\n                     onBlur={activateViewMode}\r\n                     autoFocus={true}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n})\r\n","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskType} from \"./Todolist\";\r\n\r\nexport type TaskPropsType = {\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todolistId: string) => void\r\n    removeTask: (taskID: string, todolistId: string) => void\r\n    task: TaskType\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler =() => {\r\n        props.removeTask(props.task.id, props.todolistId)\r\n    }\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\r\n    }\r\n    const onChangeTitleHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    },[props.task.id, props.todolistId, props.changeTaskTitle])\r\n\r\n    return (\r\n        <div key={props.task.id} className={props.task.isDone ? 'isDone' : 'ести'}>\r\n            <Checkbox color=\"primary\"\r\n                      onChange={onChangeStatusHandler}\r\n                      checked={props.task.isDone}/>\r\n            <EditableSpan value={props.task.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from 'react';\r\nimport {FilterValueType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    id: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskID: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValueType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\r\n    changeTaskTitle: (id: string, newValue: string, todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValueType\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    console.log('Todolist Called')\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((newTitle: string) => {\r\n        props.changeTodolistTitle(props.id, newTitle)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => !t.isDone)\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.isDone)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task\r\n                    task={t}\r\n                    changeTaskStatus={props.changeTaskStatus}\r\n                    changeTaskTitle={props.changeTaskTitle}\r\n                    removeTask={props.removeTask}\r\n                    todolistId={props.id}\r\n                    key={t.id}\r\n                />)\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button color={\"default\"}\r\n                    variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}>\r\n                All\r\n            </Button>\r\n            <Button color={\"primary\"}\r\n                    variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}>\r\n                Active\r\n            </Button>\r\n            <Button color={\"secondary\"}\r\n                    variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}>\r\n                Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n\r\n","import {FilterValueType, TodolistType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype ActionType =\r\n    RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ChangeTodolistTitleActionType\r\n    | ChangeTodolistFilterActionType\r\n\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\ntype ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\ntype ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValueType\r\n}\r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(t => t.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all'\r\n            }]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            let todolist = state.find(t => t.id === action.id)\r\n            if (todolist) {\r\n                todolist.title = action.title\r\n\r\n            }\r\n            return [...state]\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            let todolistFilter = state.find(tl => tl.id === action.id)\r\n            if (todolistFilter) {\r\n                todolistFilter.filter = action.filter\r\n            }\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return {\r\n        type: 'REMOVE-TODOLIST',\r\n        id: todolistId\r\n    }\r\n}\r\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\r\n    return {\r\n        type: 'ADD-TODOLIST',\r\n        title,\r\n        todolistId: v1()\r\n    }\r\n}\r\nexport const changeTitleTodolistAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-TITLE',\r\n        id,\r\n        title\r\n    }\r\n}\r\nexport const changeFilterTodolistAC = (id: string, filter: FilterValueType): ChangeTodolistFilterActionType => {\r\n    return {\r\n        type: 'CHANGE-TODOLIST-FILTER',\r\n        id: id,\r\n        filter: filter,\r\n    }\r\n}\r\n","import {TasksStateType} from \"../App\";\r\nimport {AddTodolistActionType, RemoveTodolistActionType} from \"./todolists_reducer\";\r\nimport {v1} from \"uuid\";\r\n\r\ntype RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    todolistId: string\r\n    taskId: string\r\n}\r\ntype addTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\ntype changeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS',\r\n    taskId: string,\r\n    isDone: boolean,\r\n    todolistId: string\r\n}\r\n\r\ntype changeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE',\r\n    taskId: string,\r\n    title: string,\r\n    todolistId: string\r\n}\r\n\r\ntype ActionType =\r\n    RemoveTaskActionType\r\n    | addTaskActionType\r\n    | changeTaskStatusActionType\r\n    | changeTaskTitleActionType\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = state[action.todolistId]\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskId)\r\n            stateCopy[action.todolistId] = filteredTasks\r\n            return stateCopy\r\n        }\r\n        case \"ADD-TASK\": {\r\n            const stateCopy = {...state}\r\n            let task = {id: v1(), title: action.title, isDone: false}\r\n            let tasks = stateCopy[action.todolistId]\r\n            let newTasks = [task, ...tasks]\r\n            stateCopy[action.todolistId] = newTasks\r\n            return stateCopy\r\n        }\r\n        case \"CHANGE-TASK-STATUS\": {\r\n            let todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t=> t.id === action.taskId\r\n                ? {...t, isDone: action.isDone}\r\n                : t)\r\n            return ({...state})\r\n        }\r\n        case \"CHANGE-TASK-TITLE\": {\r\n            let todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t=> t.id === action.taskId\r\n                    ? {...t, title: action.title}\r\n                    : t)\r\n            return ({...state})\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n\r\n            stateCopy[action.todolistId] = []\r\n\r\n            return stateCopy\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {\r\n        type: 'REMOVE-TASK',\r\n        taskId,\r\n        todolistId\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (title: string, todolistId: string): addTaskActionType => {\r\n    return {\r\n        type: \"ADD-TASK\",\r\n        title,\r\n        todolistId\r\n    }\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string,\r\n                                   isDone: boolean,\r\n                                   todolistId: string): changeTaskStatusActionType => {\r\n    return {\r\n        type: \"CHANGE-TASK-STATUS\",\r\n        taskId,\r\n        isDone,\r\n        todolistId\r\n    }\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): changeTaskTitleActionType => {\r\n    return {\r\n        type: \"CHANGE-TASK-TITLE\",\r\n        taskId,\r\n        title,\r\n        todolistId\r\n    }\r\n}\r\n","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {TaskType, Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeFilterTodolistAC,\r\n    changeTitleTodolistAC,\r\n    removeTodolistAC\r\n} from \"./state/todolists_reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/tasks_reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\nexport type FilterValueType = 'all' | 'active' | 'completed'\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValueType\r\n}\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    const todolists = useSelector<AppRootStateType,Array<TodolistType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType,TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskAC(id, todolistId))\r\n    }, [dispatch])\r\n\r\n\r\n    const addTask= useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskAC(title,todolistId))\r\n    },[dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValueType, todolistId: string) {\r\n        dispatch(changeFilterTodolistAC(todolistId,value))\r\n    },[dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, isDone: boolean, todolistId: string) {\r\n        dispatch(changeTaskStatusAC(id, isDone,todolistId))\r\n    },[dispatch])\r\n\r\n    const changeTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(changeTaskTitleAC(id,newTitle,todolistId))\r\n    },[dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, newTitle: string) {\r\n        dispatch(changeTitleTodolistAC(id,newTitle))\r\n    },[dispatch])\r\n\r\n    const removeTodolist=useCallback (function  (todolistId: string) {\r\n        dispatch(removeTodolistAC(todolistId))\r\n    },[dispatch])\r\n\r\n    const addTodolist =useCallback(  (title: string)=> {\r\n        dispatch(addTodolistAC(title))\r\n    },[dispatch])\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        Todolist\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Tasks</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id]\r\n                            let tasksForTodolist = allTodolistTasks\r\n\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist title={tl.title}\r\n                                              id={tl.id}\r\n                                              key={tl.id}\r\n                                              tasks={tasksForTodolist}\r\n                                              removeTask={removeTask}\r\n                                              changeFilter={changeFilter}\r\n                                              addTask={addTask}\r\n                                              changeTaskStatus={changeStatus}\r\n                                              changeTodolistTitle={changeTodolistTitle}\r\n                                              changeTaskTitle={changeTitle}\r\n                                              filter={tl.filter}\r\n                                              removeTodolist={removeTodolist}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;","import {tasksReducer} from './tasks_reducer';\r\nimport {todolistsReducer} from './todolists_reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}